// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mlibgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MusicLibraryClient is the client API for MusicLibrary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicLibraryClient interface {
	// Browse returns matching contents of a folder uri
	Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseResponse, error)
	// Media resolves a folder uri to a list of descendant media uris
	Media(ctx context.Context, in *MediaRequest, opts ...grpc.CallOption) (*MediaResponse, error)
}

type musicLibraryClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicLibraryClient(cc grpc.ClientConnInterface) MusicLibraryClient {
	return &musicLibraryClient{cc}
}

func (c *musicLibraryClient) Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseResponse, error) {
	out := new(BrowseResponse)
	err := c.cc.Invoke(ctx, "/mlibgrpc.MusicLibrary/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicLibraryClient) Media(ctx context.Context, in *MediaRequest, opts ...grpc.CallOption) (*MediaResponse, error) {
	out := new(MediaResponse)
	err := c.cc.Invoke(ctx, "/mlibgrpc.MusicLibrary/Media", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicLibraryServer is the server API for MusicLibrary service.
// All implementations must embed UnimplementedMusicLibraryServer
// for forward compatibility
type MusicLibraryServer interface {
	// Browse returns matching contents of a folder uri
	Browse(context.Context, *BrowseRequest) (*BrowseResponse, error)
	// Media resolves a folder uri to a list of descendant media uris
	Media(context.Context, *MediaRequest) (*MediaResponse, error)
	mustEmbedUnimplementedMusicLibraryServer()
}

// UnimplementedMusicLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedMusicLibraryServer struct {
}

func (UnimplementedMusicLibraryServer) Browse(context.Context, *BrowseRequest) (*BrowseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (UnimplementedMusicLibraryServer) Media(context.Context, *MediaRequest) (*MediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Media not implemented")
}
func (UnimplementedMusicLibraryServer) mustEmbedUnimplementedMusicLibraryServer() {}

// UnsafeMusicLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicLibraryServer will
// result in compilation errors.
type UnsafeMusicLibraryServer interface {
	mustEmbedUnimplementedMusicLibraryServer()
}

func RegisterMusicLibraryServer(s grpc.ServiceRegistrar, srv MusicLibraryServer) {
	s.RegisterService(&_MusicLibrary_serviceDesc, srv)
}

func _MusicLibrary_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicLibraryServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlibgrpc.MusicLibrary/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicLibraryServer).Browse(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicLibrary_Media_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicLibraryServer).Media(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlibgrpc.MusicLibrary/Media",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicLibraryServer).Media(ctx, req.(*MediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MusicLibrary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mlibgrpc.MusicLibrary",
	HandlerType: (*MusicLibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Browse",
			Handler:    _MusicLibrary_Browse_Handler,
		},
		{
			MethodName: "Media",
			Handler:    _MusicLibrary_Media_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musiclib.proto",
}
